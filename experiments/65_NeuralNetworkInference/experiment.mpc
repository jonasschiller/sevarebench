#This program loads a pre-trained model and performs inference on the test set.
#The model is trained in clear by one party which then holds the weights.
#The other party provides the inputs
program.options_from_args()

from compiler import ml
import torchvision
import torch
import torch.nn as nn

#Set the architecture of the model and determine the necessary layers
net = nn.Sequential(
    nn.Conv2d(1, 6, 5),
    nn.ReLU(),
    nn.MaxPool2d(2),
    nn.Conv2d(6, 16, 5),
    nn.ReLU(),
    nn.MaxPool2d(2),
    nn.Flatten(),
    nn.Linear(16 * 4 * 4, 120),
    nn.ReLU(),
    nn.Linear(120, 84),
    nn.ReLU(),
    nn.Linear(84, 10)
)


graph = ml.Optimizer()
#parameters are model, input size, batch size, input_via
layers = ml.layers_from_torch(net, [28,28], 1, input_via=1)
graph.layers = layers
#Load the inputs from player 0
layers[0].X.input_from(0)
graph.forward(1)
res = layers[-1].Y